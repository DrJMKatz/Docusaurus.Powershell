# -----------------------------------------------------------------------------
# Job that publishes the new module to the PSGallery.
#
# - requires protected Azure Pipeline environment variable `PSGALLERY_API_KEY`
# - will not publish the module if [no-release] is in the commit message
# -----------------------------------------------------------------------------
parameters:
  artifactName: ''
  artifactDownloadDirectory: $(Build.ArtifactStagingDirectory)

jobs:
  - job: PSGallery
    dependsOn: ${{ parameters.dependsOn }}
    pool:
      vmImage: 'windows-2019'

    steps:
    - template: ../steps/log-virtual-machine-information.yml
    - template: ../steps/set-skip-release-variable.yml

    # log template parameters
    - powershell: |
        Write-Host "jobName                  = ${{ parameters.jobName }}"
        Write-Host "artifactName              = ${{ parameters.artifactName }}"
        Write-Host "artifactDownloadDirectory = ${{ parameters.artifactDownloadDirectory }}"
      displayName: 'Template Parameters'

    # make sure the required web interface secret API Key variable exists
    - powershell: |
        Write-Host "Making sure secret pipeline variable PSGALLERY_API_KEY is available"
        if($env:MAPPED_PSGALLERY_API_KEY -match 'PSGALLERY_API_KEY') {
          throw "Azure pipeline secret variable PSGALLERY_API_KEY does not exist. Are you sure that you have configured it using the Azure Devops web interface?"
        }
      displayName: 'Validate API Key'
      env:
        MAPPED_PSGALLERY_API_KEY: $(PSGALLERY_API_KEY)

    # download the module artifact
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Build Artifacts'
      condition: ne(variables['SKIP_RELEASE'], 'True')
      inputs:
        artifactName: ${{ parameters.artifactName }}
        downloadPath: ${{ parameters.artifactDownloadDirectory }}

    # publish the new module to PSGALLERY
    - powershell: |
        # being lazy here for now, single module only
        $moduleName = Get-ChildItem -Path "${{ parameters.artifactDownloadDirectory }}" -Directory
        $moduleVersion = Get-ChildItem -Path (Join-Path -Path "${{ parameters.artifactDownloadDirectory }}" -ChildPath $moduleName) -Directory
        $moduleFolder = [IO.Path]::Combine("${{ parameters.artifactDownloadDirectory }}", $moduleName, $moduleVersion)
        Write-Host "moduleName    = $moduleName"
        Write-Host "moduleVersion = $moduleVersion"
        Write-Host "moduleFolder = $moduleFolder"
        Get-ChildItem -Path $moduleFolder

        #Publish-Module -Path $publishFolder -NuGetApiKey $env:MAPPED_PSGALLERY_API_KEY -Verbose
      displayName: 'Publish-Module'
      condition: ne(variables['SKIP_RELEASE'], 'True')
      env:
        MAPPED_PSGALLERY_API_KEY: $(PSGALLERY_API_KEY)
