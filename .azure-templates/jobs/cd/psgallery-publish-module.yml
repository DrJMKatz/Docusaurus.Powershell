# -----------------------------------------------------------------------------
# Job that publishes the new module to the PSGallery.
#
# - requires protected Azure Pipeline environment variable `PSGALLERY_API_KEY`
# - will not publish the module if [no-release] is in the commit message
# -----------------------------------------------------------------------------
parameters:
  dependsOn: []
  artifactName: ''
  artifactDownloadDirectory: $(Build.ArtifactStagingDirectory)

jobs:
  - job: PSGallery
    dependsOn: ${{ parameters.dependsOn }}
    pool:
      vmImage: 'windows-2019'

    steps:
    - template: ../../steps/log-virtual-machine-information.yml
    - template: ../../steps/cd/set-skip-release-variable.yml

    # -------------------------------------------------------------------------
    # log the template paramters for future debugging
    # -------------------------------------------------------------------------
    - powershell: |
        Write-Host "artifactName              = ${{ parameters.artifactName }}"
        Write-Host "artifactDownloadDirectory = ${{ parameters.artifactDownloadDirectory }}"
      displayName: 'Template Parameters'

    # -------------------------------------------------------------------------
    # make sure the required Azure web interface secret variables exist
    # -------------------------------------------------------------------------
    - powershell: |
        Write-Host "Making sure secret pipeline variable PSGALLERY_API_KEY is available"
        if($env:MAPPED_PSGALLERY_API_KEY -match 'PSGALLERY_API_KEY') {
          throw "Azure pipeline secret variable PSGALLERY_API_KEY does not exist. Are you sure that you have configured it using the Azure Devops web interface?"
        }
      displayName: 'Validate API Key'
      condition: and(succeeded(), ne(variables['SKIP_RELEASE'], 'True'))
      env:
        MAPPED_PSGALLERY_API_KEY: $(PSGALLERY_API_KEY)

    # -------------------------------------------------------------------------
    # download the module artifiact
    # -------------------------------------------------------------------------
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Build Artifacts'
      condition: and(succeeded(), ne(variables['SKIP_RELEASE'], 'True'))
      inputs:
        artifactName: ${{ parameters.artifactName }}
        downloadPath: ${{ parameters.artifactDownloadDirectory }}

    # -------------------------------------------------------------------------
    # create environment variables by analyzing the module artifact
    # -------------------------------------------------------------------------
    - template: ../../steps/cd/create-variables-from-modules-artifact.yml
      parameters:
        artifactDownloadDirectory: ${{ parameters.artifactDownloadDirectory }}

    # -------------------------------------------------------------------------
    # publish new module to the PSGallery
    # -------------------------------------------------------------------------
    - powershell: |
        Write-Host "Publishing folder $env:ARTIFACT_MODULE_FOLDER"

        Publish-Module -Path "$env:ARTIFACT_MODULE_FOLDER" -NuGetApiKey $env:MAPPED_PSGALLERY_API_KEY -Verbose
      displayName: 'Publish-Module'
      condition: and(succeeded(), ne(variables['SKIP_RELEASE'], 'True'))
      env:
        MAPPED_PSGALLERY_API_KEY: $(PSGALLERY_API_KEY)
