# -----------------------------------------------------------------------------
# Job that creates a Github release by creating a Git tag with markdown body.
#
# - requires protected Azure Pipeline environment variable `GITHUB_API_KEY`
# - will not create the release if [no-release] is in the commit message
# -----------------------------------------------------------------------------
parameters:
  dependsOn: []

jobs:
  - job: Github
    dependsOn: ${{ parameters.dependsOn }}
    workspace:
      clean: outputs

    pool:
      vmImage: 'windows-2019'

    steps:
    # log virtual machine settings
    - template: ../steps/log-virtual-machine-information.yml

    # log template parameters
    - powershell: |
        Write-Host "jobName                  = ${{ parameters.jobName }}"
        Write-Host "artifactName              = ${{ parameters.artifactName }}"
        Write-Host "artifactDownloadDirectory = ${{ parameters.artifactDownloadDirectory }}"
      displayName: 'Template Parameters'

    # download moduleBuilderVariables artifact
    - download: current
      artifact: moduleBuilderVariables
      displayName: Download Variables Artifact

    # download the module
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: ${{ parameters.artifactName }}
        downloadPath: ${{ parameters.artifactDownloadDirectory }}

    # publish the new module to PSGALLERY
    - powershell: |
        if(-Not($env:MAPPED_GITHUB_API_KEY)) {
          throw "Azure pipeline protected variable GITHUB_API_KEY does not exist. Are you sure you configured it using the Azure Devops web interface?"
        }

        # being lazy for now, single module only
        $moduleName = Get-ChildItem -Path "${{ parameters.artifactDownloadDirectory }}" -Directory
        $moduleVersion = Get-ChildItem -Path (Join-Path -Path "${{ parameters.artifactDownloadDirectory }}" -ChildPath $moduleName) -Directory
        $moduleFolder = [IO.Path]::Combine("${{ parameters.artifactDownloadDirectory }}", $moduleName, $moduleVersion)
        Write-Host "moduleName    = $moduleName"
        Write-Host "moduleVersion = $moduleVersion"
        Write-Host "moduleFolder = $moduleFolder"
        Get-ChildItem -Path $moduleFolder

        Write-Host "Creating Release $moduleVersion"
      displayName: CreateRelease
      condition: not(contains(variables['Build.SourceVersionMessage'], '[no-release]'))
      env:
        MAPPED_GITHUB_API_KEY: $(GITHUB_API_KEY)
